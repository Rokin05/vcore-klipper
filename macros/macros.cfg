# __     ______ ___  ____  _____ 
# \ \   / / ___/ _ \|  _ \| ____|
#  \ \ / / |  | | | | |_) |  _|  
#   \ V /| |__| |_| |  _ <| |___ 
#    \_/  \____\___/|_| \_\_____| 3.1
#           Standalone 300 Setup.
# 
# Doc : https://www.klipper3d.org/G-Codes.html
#       https://www.klipper3d.org/Command_Templates.html
#       https://www.klipper3d.org/Status_Reference.html
#       https://jinja.palletsprojects.com/en/2.10.x/templates/
#       https://klipper.discourse.group/t/macro-creation-tutorial/30



#####################################################################
#   SETUP
#####################################################################

[gcode_macro CONF]
description: Conf variables storage.
    
# Macros Speed :
variable_travel_speed: 400
variable_travel_speed_z: 14

# Extruder
variable_extruder_relative: True        # Set to True to use relative extrusion mode
variable_extruder_retract_lenght: 12    # Retract filament lenght

# Bed Mesh / Leveling
variable_bed_mesh_calibrate: True       # Calibrate the bed mesh in the START_PRINT macro.
variable_bed_mesh_profil: "ratos"
variable_bed_mesh_extruder_prehead: 170 # Prehead extruser temp
#variable_skew_profile: "skew"

# Filament Management :
variable_filament_load_length: 80
variable_filament_load_speed: 10
variable_filament_unload_length: 100
variable_filament_unload_speed: 5

# Homing (homing.cfg)
variable_homing_x: "middle"             # Possible Values: 'middle' or an absolute x coordinate
variable_homing_y: "middle"             # Possible Values: 'middle' or an absolute x coordinate
variable_homing_z_hop: 6

# Parking : Start Print :
variable_start_park_x: "right"          # left, right, center
variable_start_park_y: "front"          # back, front, center
variable_start_park_z: 30               # Z Height (absolute)

# Parking : End Print :
variable_end_park_x: "center"           # left, right, center
variable_end_park_y: "back"             # back, front, center
variable_end_park_z: 60                 # Z Height (relative)

# Parking : Pause / Resume :
variable_pause_park_x: "left"           # left, right, center
variable_pause_park_y: "back"           # back, front, center
variable_pause_park_z: 20               # Z Height (relative)
variable_pause_retract_lenght: 2        # Retract filament lenght

# Prime
variable_nozzle_priming: "primeblob"    # primeblob / primeline
variable_nozzle_prime_start_x: "max"    # min, max or number
variable_nozzle_prime_start_y: "min"    # min, max or number
variable_nozzle_prime_direction: "auto" # auto, forwards, backwards

gcode:
    {% for var, value in printer["gcode_macro CONF"].items() %}
        {action_respond_info(var ~ ": " ~ value)}
    {% endfor %}


#####################################################################
# 	START / END
#####################################################################

[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer[printer.toolhead.extruder].target, true)|float %}
    {% set BED_TEMP = params.BED_TEMP|default(printer.heater_bed.target, true)|float %}
    {% set preheat_ext = printer["gcode_macro CONF"].bed_mesh_extruder_prehead|float %}
    {% set bed_mesh_profil = printer["gcode_macro CONF"].bed_mesh_profil %}
    {% set min_ext = EXTRUDER_TEMP|float - 5 %}
    {% set max_ext = EXTRUDER_TEMP|float + 5 %}
    {% set min_bed = BED_TEMP|float - 2 %}
    {% set max_bed = BED_TEMP|float + 10 %}
    {% set preheat_min_ext = preheat_ext|float - 20 %}
    {% set preheat_max_ext = preheat_ext|float + 5 %}

    CLEAR_PAUSE                         # Clear the current paused state without resuming the print. 
    SAVE_GCODE_STATE NAME=START_state   # https://www.klipper3d.org/G-Codes.html?h=turn_off_heaters#save_gcode_state

    G90                     # Use absolute coordinates.
    G92 E0                  # Reset extrudeur.
    G21                     # Metric values.
    
    # [Start Preheat]
    RESPOND PREFIX="[START]" COLOR="primary" MSG="Heat bed at {BED_TEMP} (min: {min_bed} - max: {max_bed})" 
    M140 S{BED_TEMP}        # Start bed heating.
    {% if printer[printer.toolhead.extruder].target < preheat_ext %}
        RESPOND PREFIX="[START]" COLOR="primary" MSG="Preheat extruder at {preheat_ext} (min: {preheat_min_ext} - max: {EXTRUDER_TEMP})" 
        M104 S{preheat_ext} # Start extruder preheat if needed. 
    {% endif %}

    # [Home if needed]
    MAYBE_HOME              

    #[ Wait Hotend Preheat]
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={preheat_min_ext} MAXIMUM={EXTRUDER_TEMP}

    #[ Wait Bed Heating]
    TEMPERATURE_WAIT SENSOR=heater_bed minimum={min_bed} maximum={max_bed} 

    # [Adjust Bed Tilt]
    {% if not printer.z_tilt.applied %}
        RESPOND PREFIX="[START]" COLOR="primary" MSG="Adjust bed tilt" 
        Z_TILT_ADJUST
        G28 Z # Home again as Z will have changed after tilt adjustment and bed heating.
    {% endif %}

    # [Bed Mesh]
    {% if printer["gcode_macro CONF"].bed_mesh_calibrate|lower == 'true' %}
        RESPOND PREFIX="[START]" COLOR="primary" MSG="Calibrate Bed Mesh (Profil: {bed_mesh_profil})"
        #BED_MESH_CALIBRATE PROFILE={bed_mesh_profil} 
        PAM # @fixme: add "if pam installed... ?"
        BED_MESH_PROFILE LOAD={bed_mesh_profil} 
    {% endif %}

    # [Extruder Heating]
    RESPOND PREFIX="[START]" COLOR="primary" MSG="Heating Extruder at {EXTRUDER_TEMP} (min: {min_ext} - max: {max_ext})"
    M104 S{EXTRUDER_TEMP}
    
    _START_PRINT_PARKING

    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={min_ext} MAXIMUM={max_ext} # Wait extruder heating
    
    {% if printer["gcode_macro CONF"].skew_profile is defined %}
        RESPOND PREFIX="[START]" COLOR="primary" MSG="Load Skew Profile (printer["gcode_macro CONF"].skew_profile)"
        SKEW_PROFILE LOAD={printer["gcode_macro CONF"].skew_profile}
    {% endif %}

    {% if printer["gcode_macro CONF"].nozzle_priming|lower == 'primeline' %}
        PRIME_LINE
    {% endif %}
    {% if printer["gcode_macro CONF"].nozzle_priming|lower == 'primeblob' %}
        PRIME_BLOB
    {% endif %}

    RESTORE_GCODE_STATE NAME=START_state

    # Set extrusion mode based on user configuration
    {% if printer["gcode_macro CONF"].extruder_relative|lower == 'true' %}
        M83
    {% else %}
        M82
    {% endif %}
    G92 E0   # Reset extrudeur
    WLED_PRINTING
    RESPOND PREFIX="[START]" COLOR="primary" MSG="Printing..." 

#--------------------------------------------------------------------

[gcode_macro END_PRINT]
description: End print procedure, use this in your Slicer.
gcode:
    RESPOND PREFIX="[END]" COLOR="primary" MSG="Ending Print..."
    M400                    # wait for buffer to clear
    G92 E0                  # Reset extrudeur
    TURN_OFF_HEATERS
    _EXTRUDER_RETRACT       # Retract a bit for prevent nozzle leak.
    _END_PRINT_PARKING      # Go to parking
    M107                    # Turn fan off
    G92 E0                  # Reset extrudeur
    #M84                     # Disable steppers
    M220 S100               # Reset Klipper speed
    # Clear skew profile if any was loaded.
    {% if printer["gcode_macro CONF"].skew_profile is defined %}
        SET_SKEW CLEAR=1
    {% endif %}
    WLED_END
    RESPOND PREFIX="[END]" COLOR="primary" MSG="Print Done !"


#####################################################################
# 	PAUSE / RESUME / CANCEL
#####################################################################

[gcode_macro PAUSE]
description: Pauses the printer
rename_existing: PAUSE_BASE
gcode:
    {% set SPEED_Z = printer["gcode_macro CONF"].travel_speed_z|default(10)|float * 60 %}
    {% set LENGHT = printer["gcode_macro CONF"].pause_retract_lenght|default(2)|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    # Calculate safe Z position
    {% if act_z < (max_z - 20.0) %}
        {% set z_safe = 20.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    SAVE_GCODE_STATE NAME=PAUSE_state
    PAUSE_BASE
    # Retract
    {% if printer.extruder.can_extrude|lower == 'true' %}
        RESPOND PREFIX="[PAUSE]" COLOR="primary" MSG="Retract {LENGHT}mm for prevent nozzle leak."
        G92 E0              # Reset extrudeur
        M83                 # Set e-relative.
        G1 E-{LENGHT} F2100 # Retract a bit.
        G92 E0              # Reset extrudeur
    {% else %}
        RESPOND PREFIX="[PAUSE]" COLOR="primary" MSG="Skip retract, not hot enough !"
    {% endif %}
    # Move to park position
    {% if "xyz" in printer.toolhead.homed_axes %}
        G91 # Relative positioning
        G0 Z{z_safe} F{SPEED_Z}
        _PAUSE_PRINT_PARKING
    {% else %}
        RESPOND PREFIX="[PAUSE]" COLOR="primary" MSG="Skip, printer not homed !"
    {% endif %} 

#--------------------------------------------------------------------

[gcode_macro RESUME]
description: Resumes the print if the printer is paused.
rename_existing: RESUME_BASE
gcode:
    {% set LENGHT = printer["gcode_macro CONF"].pause_retract_lenght|default(2)|float %}
    # Prime
    {% if printer.extruder.can_extrude|lower == 'true' %}
        RESPOND PREFIX="[RESUME]" COLOR="primary" MSG="Unretract previously {LENGHT}mm for prevent nozzle leak."
        G92 E0              # Reset extrudeur
        M83                 # Set e-relative.
        G1 E{LENGHT} F2100  # Extract a bit.
        G92 E0              # Reset extrudeur
    {% else %}
        RESPOND PREFIX="[RESUME]" COLOR="primary" MSG="Skip, printer not hot enough !"
    {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    RESUME_BASE

#--------------------------------------------------------------------

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    END_PRINT
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    CANCEL_PRINT_BASE


#####################################################################
# 	PRIME
#####################################################################

[gcode_macro PRIME_BLOB]
description: Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.
gcode:
    {% set PARK_Z = printer["gcode_macro CONF"].start_park_z|default(30)|float %}  # Height
    {% set SPEED = params.SPEED|default(printer["gcode_macro CONF"].travel_speed)|float * 60 %}
    {% set SPEED_Z = printer["gcode_macro CONF"].travel_speed_z|default(10)|float * 60 %}

    {% if printer["gcode_macro CONF"].nozzle_prime_start_x|lower == 'min' %}
        {% set x_start = printer.toolhead.axis_minimum.x + 5 %}
    {% elif printer["gcode_macro CONF"].nozzle_prime_start_x|lower == 'max' %}
        {% set x_start = printer.toolhead.axis_maximum.x - 5 %}
    {% else %}
        {% set x_start = printer["gcode_macro CONF"].nozzle_prime_start_x|float %}
    {% endif %}

    {% if printer["gcode_macro CONF"].nozzle_prime_start_y|lower == 'min' %}
        {% set y_start = 5 %}
        {% set y_factor = 1 %}
    {% elif printer["gcode_macro CONF"].nozzle_prime_start_y|lower == 'max' %}
        {% set y_start = printer.toolhead.axis_maximum.y - 5 %}
        {% set y_factor = -1 %}
    {% else %}
        {% set y_start = printer["gcode_macro CONF"].nozzle_prime_start_y|float %}
        {% if printer["gcode_macro CONF"].nozzle_prime_start_y|float < printer.toolhead.axis_maximum.y / 2 %}
        {% set y_factor = 1 %}
        {% else %}
        {% set y_factor = -1 %}
        {% endif %}
    {% endif %}

    {% if printer["gcode_macro CONF"].nozzle_prime_direction|lower == 'forwards' %}
        {% set y_factor = 1 %}
    {% elif printer["gcode_macro CONF"].nozzle_prime_direction|lower == 'backwards' %}
        {% set y_factor = -1 %}
    {% endif %}
    

    {% if printer.extruder.can_extrude|lower == 'true' %}    
        SAVE_GCODE_STATE NAME=prime_blob_state
        RESPOND PREFIX="[PRIME]" COLOR="secondary" MSG="Priming nozzle with prime blob.."

        G90                     # Use absolute coordinates. 
        M83                     # Relative extrusion
        G0 Z{PARK_Z} F{SPEED_Z} # Lift to start print Z height
        G1 X{x_start} F{SPEED}  # move to blob position along the edge of the bed
        G1 Y{y_start} F{SPEED}  # move to blob position along the edge of the bed
        G1 Z0.5 F{SPEED_Z}      # Lower to blob height
        _EXTRUDER_UNRETRACT     # Extrude the previous retracted distance (so ~nothing)
        RESPOND PREFIX="[PRIME]" COLOR="secondary" MSG="Priming : Extrude the blob : 14mm"
        G1 F300 E14             # Extrude a blob
        M106 S102               # 40% fan
        G1 Z5 F100 E3           # Move the extruder up by 5mm while extruding, breaks away from blob
        G1 F400 Y{y_start + (10 * y_factor)} E1 # Move to wipe position, but keep extruding so the wipe is attached to blob

        # Go down diagonally while extruding
        # Broken down in z moves under 2mm as a workaround for a tuning tower test.
        # The tuning tower command thinks a new print has been started when z moves over 2mm and aborts.
        G1 F300 Y{y_start + (15 * y_factor)} Z3.8 E0.3
        G1 F300 Y{y_start + (18 * y_factor)} Z2.6 E0.3
        G1 F300 Y{y_start + (21 * y_factor)} Z1.4 E0.3
        G1 F300 Y{y_start + (24 * y_factor)} Z0.25 E0.3
        
        M106 S0 # fan off                                        # 0% fan
        G1 F300 Y{y_start + (34 * y_factor)} Z0.25 E0.4  # small wipe line
        G1 F{SPEED} Y{y_start + (100 * y_factor)}       # Break away wipe
        G1 Z0.5 F{SPEED_Z}

        RESTORE_GCODE_STATE NAME=prime_blob_state

    {% else %}
        RESPOND PREFIX="[PRIME]" COLOR="secondary" MSG="Priming blob abord, not hot enough !"
    {% endif %}


#####################################################################
# PARKING
#####################################################################

[gcode_macro _START_PRINT_PARKING]
gcode:
    {% set PARK_X = printer["gcode_macro CONF"].start_park_x %}  # left, right, center
    {% set PARK_Y = printer["gcode_macro CONF"].start_park_y %}  # back, front, center
    {% set PARK_Z = printer["gcode_macro CONF"].start_park_z|default(30)|float %}  # Height
    {% set SPEED_Z = printer["gcode_macro CONF"].travel_speed_z|default(10)|float * 60 %}
    G90 # Absolute coordinates.
    G0 Z{PARK_Z} F{SPEED_Z}
    PARKING X={PARK_X} Y={PARK_Y}
    
#--------------------------------------------------------------------

[gcode_macro _END_PRINT_PARKING]
gcode:
    {% set PARK_X = printer["gcode_macro CONF"].end_park_x %}  # left, right, center
    {% set PARK_Y = printer["gcode_macro CONF"].end_park_y %}  # back, front, center
    {% set PARK_Z = printer["gcode_macro CONF"].end_park_z|default(50)|float %} # Height
    {% set SPEED_Z = printer["gcode_macro CONF"].travel_speed_z|default(10)|float * 60 %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    # Define Z parking
    {% if act_z < (max_z - PARK_Z) %}
        {% set z_safe = PARK_Z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    G91 # Relative positioning
    G0 Z{z_safe} F{SPEED_Z} # Move to safe Z position
    PARKING X={PARK_X} Y={PARK_Y}

#--------------------------------------------------------------------

[gcode_macro _PAUSE_PRINT_PARKING]
gcode:
    {% set PARK_X = printer["gcode_macro CONF"].pause_park_x %}  # left, right, center
    {% set PARK_Y = printer["gcode_macro CONF"].pause_park_y %}  # back, front, center
    {% set PARK_Z = printer["gcode_macro CONF"].pause_park_z|default(20)|float %} # Height
    {% set SPEED_Z = printer["gcode_macro CONF"].travel_speed_z|default(10)|float * 60 %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    # Define Z parking
    {% if act_z < (max_z - PARK_Z) %}
        {% set z_safe = PARK_Z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    G91 # Relative positioning
    G0 Z{z_safe} F{SPEED_Z} # Move to safe Z position
    PARKING X={PARK_X} Y={PARK_Y}

#--------------------------------------------------------------------

[gcode_macro PARKING]
gcode:
    {% set X = params.X %}  # left, right, center
    {% set Y = params.Y %}  # back, front, center
    {% set SPEED = params.SPEED|default(printer["gcode_macro CONF"].travel_speed)|float * 60 %}
    {% set dy = printer.toolhead.axis_maximum.y - 5 %} # failback
    {% set dx = printer.toolhead.axis_maximum.x - 5 %} # failback
    # Get Y position (back/front/center)
    {% if Y|lower == 'back' %}
        {% set dy = printer.toolhead.axis_maximum.y - 5 %}
    {% elif Y|lower == 'front' %}
        {% set dy = printer.toolhead.axis_minimum.y + 5 %}
    {% elif Y|lower == 'center' %}
        {% set dy = printer.toolhead.axis_maximum.y / 2 %}
    {% endif %}
    # Get X position (left/right/center)
    {% if X|lower == 'left' %}
        {% set dx = printer.toolhead.axis_minimum.x + 5 %}
    {% elif X|lower == 'right' %}
        {% set dx = printer.toolhead.axis_maximum.x - 5 %}
    {% elif X|lower == 'center' %}
        {% set dx = printer.toolhead.axis_maximum.x / 2 %}
    {% endif %}
    G90 # Absolute positioning
    G0 X{dx} Y{dy} F{SPEED} # Park


#####################################################################
# EXTRUDER
#####################################################################

[gcode_macro _EXTRUDER_RETRACT]
gcode:
    {% set LENGHT = params.LENGHT|default(printer["gcode_macro CONF"].extruder_retract_lenght)|default(10)|float %}
    {% if printer.extruder.can_extrude|lower == 'true' %}
        RESPOND PREFIX="[EXTRUDER]" COLOR="secondary" MSG="Retract {LENGHT}mm for prevent nozzle leak."
        G92 E0      # Reset extrudeur
        M83         # Set e-relative.
        G1 E-{LENGHT} F2100
        G92 E0      # Reset extrudeur
    {% else %}
        RESPOND PREFIX="[EXTRUDER]" COLOR="secondary" MSG="Skip retract, not hot enough !"
    {% endif %}

#--------------------------------------------------------------------

[gcode_macro _EXTRUDER_UNRETRACT]
gcode:
    {% set LENGHT = params.LENGHT|default(printer["gcode_macro CONF"].extruder_retract_lenght)|default(10)|float %}
    {% if printer.extruder.can_extrude|lower == 'true' %}
        RESPOND PREFIX="[EXTRUDER]" COLOR="secondary" MSG="Unretract previously {LENGHT}mm for prevent nozzle leak."
        G92 E0      # Reset extrudeur
        M83         # Set e-relative.
        G1 E{LENGHT} F300
        G92 E0      # Reset extrudeur
    {% else %}
        RESPOND PREFIX="[EXTRUDER]" COLOR="secondary" MSG="Skip unretract, not hot enough !"
    {% endif %}


#####################################################################
# FILAMENT MANAGEMENT (LOAD / UNLOAD)
#####################################################################

[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
    {% set LENGHT = printer["gcode_macro CONF"].filament_load_length|default(100)|float %}
    {% set SPEED = printer["gcode_macro CONF"].filament_load_speed|default(5)|float * 60 %}
    {% set PREHEAT = params.TEMP|default(220, true)|float %}
    SAVE_GCODE_STATE NAME=load_state
    # Preheat if needed.
    {% if printer[printer.toolhead.extruder].target < PREHEAT %}
        RESPOND PREFIX="[FILAMENT]" COLOR="primary" MSG="LOAD : Heating... ({PREHEAT})"
        M104 S{PREHEAT}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={PREHEAT}
    {% endif %}
    RESPOND PREFIX="[FILAMENT]" COLOR="primary" MSG="LOAD : Loading.. ({LENGHT}mm)"
    G92 E0                          # Reset extrudeur
    M83                             # Set e-relative.
    G0 E{LENGHT} F{SPEED}           # Load the filament into the hotend area.
    G4 P1000                        # Wait a second.
    G0 E20 F100                     # Purge.
    _EXTRUDER_RETRACT               # Retract a bit for prevent nozzle leak.
    G92 E0                          # Reset extrudeur 
    M400                            # Wait for buffer to clear.
    TURN_OFF_HEATERS
    RESTORE_GCODE_STATE NAME=load_state
    RESPOND PREFIX="[FILAMENT]" COLOR="primary" MSG="LOAD : Done !"

#--------------------------------------------------------------------

[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
    {% set LENGHT = printer["gcode_macro CONF"].filament_unload_length|default(100)|float %}
    {% set SPEED = printer["gcode_macro CONF"].filament_unload_speed|default(5)|float * 60 %}
    {% set PREHEAT = params.TEMP|default(220, true)|float %}
    SAVE_GCODE_STATE NAME=unload_state
    # Preheat if needed.
    {% if printer[printer.toolhead.extruder].target < PREHEAT %}
        RESPOND PREFIX="[FILAMENT]" COLOR="primary" MSG="UNLOAD : Heating... ({PREHEAT})"
        M104 S{PREHEAT}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={PREHEAT}
    {% endif %}
    RESPOND PREFIX="[FILAMENT]" COLOR="primary" MSG="UNLOAD : Unloading.. ({LENGHT}mm)"
    G92 E0                  # Reset extrudeur
    M83                     # Set e-relative.
    G0 E10 F300             # Extrude a bit.
    G0 E-5 F3600            # Extract filament to cold end area. 
    G4 P3000                # Wait for three seconds.
    G0 E5 F3600             # Push back the filament to smash any stringing. 
    G0 E-15 F3600           # Extract back fast in to the cold zone.  
    G0 E-{LENGHT} F{SPEED}  # Continue extraction slowly, allow the filament time to cool solid before it reaches the gears. 
    G92 E0                  # Reset extrudeur
    M400                    # Wait for buffer to clear.
    #TURN_OFF_HEATERS
    RESTORE_GCODE_STATE NAME=unload_state
    RESPOND PREFIX="[FILAMENT]" COLOR="primary" MSG="UNLOAD : Done !, Please inspect the tip of the filament before reloading."


#####################################################################
# MISCS
#####################################################################

[gcode_macro M600]
description: Executes a color change by pausing the printer an unloading the filament.
gcode:
    PAUSE
    UNLOAD_FILAMENT
    RESPOND PREFIX="[M600]" COLOR="accent" MSG="Please load new filament and resume"

#--------------------------------------------------------------------

[gcode_macro SET_CENTER_KINEMATIC_POSITION]
description: FOR DEBUGGING PURPOSES ONLY. Sets the internal printer kinematic state to the center of all axes regardless of actual physical position.
gcode:
  RESPOND PREFIX="[CENTER_KINEMATIC]" COLOR="warning" MSG="WARNING: ONLY USE SET_CENTER_KINEMATIC_POSITION FOR DEBUGGING PURPOSES !"
  RESPOND PREFIX="[CENTER_KINEMATIC]" COLOR="warning" MSG="YOU'RE OVERRIDING THE INTERNAL POSITIONING STATE OF THE PRINTER. PROCEED WITH CAUTION AND DO A PROPER G28 WHEN DONE."
  SET_GCODE_VARIABLE MACRO=MAYBE_HOME VARIABLE=is_kinematic_position_overriden VALUE=True
  SET_KINEMATIC_POSITION X={printer.toolhead.axis_maximum.x / 2} Y={printer.toolhead.axis_maximum.y / 2} Z={printer.toolhead.axis_maximum.z / 2}


#####################################################################
# PID
#####################################################################

[gcode_macro TUNE_PID_EXTRUDER]
description: Calibrate Extruder Temperature
gcode: 
    {% set TEMP = params.TEMP|default(230)|float %}
    {% set SPEED_Z = printer["gcode_macro CONF"].travel_speed_z|default(10)|float * 60 %}
    RESPOND PREFIX="[PID]" COLOR="primary" MSG="PID Extruder.. (temp target : {TEMP})"
    MAYBE_HOME                       # Home X,Y,Z (G28)
    G90                             # Absolute coordinates.
    G0 Z6 F{SPEED_Z}                # Nozzle at 6mm
    PARKING X="center" Y="center"   # Move to center
    M106 S102                       # Fan at 40%
    PID_CALIBRATE HEATER=extruder TARGET={TEMP}
    M106 S0                         # Fan off
    RESPOND PREFIX="[PID]" COLOR="primary" MSG="PID Extruder done, use SAVE_CONFIG to save change !"

#--------------------------------------------------------------------

[gcode_macro TUNE_PID_BED]
description: Calibrate Bed Temperature
gcode: 
    {% set TEMP = params.TEMP|default(70)|float %}
    {% set SPEED_Z = printer["gcode_macro CONF"].travel_speed_z|default(10)|float * 60 %}
    RESPOND PREFIX="[PID]" COLOR="primary" MSG="PID Bed.. (temp target : {TEMP})"
    MAYBE_HOME                       # Home X,Y,Z (G28)
    G90                             # Absolute coordinates.
    G0 Z6 F{SPEED_Z}                # Nozzle at 6mm
    PARKING X="center" Y="center"   # Move to center
    PID_CALIBRATE HEATER=heater_bed TARGET={TEMP}
    RESPOND PREFIX="[PID]" COLOR="primary" MSG="PID Bed done, use SAVE_CONFIG to save change !"



#####################################################################
# TUNE
#####################################################################

[gcode_macro BED_MESH_COLD]
description: Run a cold bed mesh.
gcode:
    M104 S170
    MAYBE_HOME
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=170
    Z_TILT_ADJUST
    G28 Z
    BED_MESH_CALIBRATE PROFILE=cold
    TURN_OFF_HEATERS
    PARKING

#--------------------------------------------------------------------

[gcode_macro PROBE_ACCURACY_20]
gcode:
    MAYBE_HOME
    PROBE_ACCURACY SAMPLES=20

#--------------------------------------------------------------------

[gcode_macro GENERATE_VIBRATIONS_GRAPH]
gcode:
    MAYBE_HOME
    VIBRATIONS_CALIBRATION SIZE=150 MIN_SPEED=40 MAX_SPEED=220 SPEED_INCREMENT=5 TRAVEL_SPEED=300

#--------------------------------------------------------------------

# only for make shortcut in dashboard
[gcode_macro Z_TILT]
gcode:
    M104 S170
    MAYBE_HOME
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=170
    Z_TILT_ADJUST
    G28 Z
    TURN_OFF_HEATERS




